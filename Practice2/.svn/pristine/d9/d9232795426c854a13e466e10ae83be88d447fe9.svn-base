package ua.nure.chekhunov.practice2;

import java.util.Iterator;

/**
 * @author macbookpro
 *
 */
public class QueueImpl implements Queue {
	private Node top;
	private Node first;
	private Node last;

	/**
	 * Mod count.
	 */
	private int modCount;

	/**
	 * Current position to index array.
	 */
	private int pointer;

	{
		modCount = 0;
	}

	/**
	 * {@link Object}.
	 */
	private Object[] arr = {};

	public QueueImpl() {
		this.first = this.last = null;
		this.modCount = 0;
	}

	public Node getTop() {

		return top;

	}

	@Override
	public void clear() {

		arr = new Object[] {};

	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see ua.nure.chekhunov
	 */
	@Override
	public int size() {

		return toArray().length;

	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see ua.nure.chekhunov
	 */
	@Override
	public Iterator<Object> iterator() {

		return new IteratorImpl();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see ua.nure.chekhunov
	 */
	@Override
	public void enqueue(Object element) {

		Object[] arr2 = new Object[arr.length + 1];
		System.arraycopy(arr, 0, arr2, 0, arr.length);
		arr2[arr2.length - 1] = element;
		arr = arr2;
		modCount++;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see ua.nure.chekhunov
	 */
	@Override
	public Object dequeue() {
		Object[] arr2 = new Object[arr.length - 1];
		System.arraycopy(arr, 0, arr2, 0, 0);
		System.arraycopy(arr, 0 + 1, arr2, 0, arr2.length - 0);
		
		modCount--;
		return arr = arr2;
	}
//
//		arr = new Object[] {};
//		this.modCount = 0;
//		
//		Object[] temp = new Object[] {};
//		System.arraycopy(arr, 0, temp, 0, pointer);
//		return arr = temp;
	
	
	public Object removed(int index) {

		Object[] arr2 = new Object[arr.length - 1];
		System.arraycopy(arr, 0, arr2, 0, index);
		System.arraycopy(arr, index + 1, arr2, index, arr2.length - index);
		
		modCount--;
		return arr = arr2;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see ua.nure.chekhunov
	 */
	@Override
	public Object top() {

		if (isEmpty()) {
			System.out.println("Stack is empty");
			System.exit(0);
		}
		return top.getData();
	}

	public boolean isEmpty() {
		if (top == null) {
			return true;
		} else {
			return false;
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see ua.nure.chekhunov
	 */

	public Object[] toArray() {

		Object[] array = this.arr;

		return array;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see ua.nure.chekhunov
	 */

	@Override
	public String toString() {
		Iterator<Object> i = iterator();
		if (!i.hasNext())
			return "[]";

		StringBuilder sb = new StringBuilder();
		sb.append('[');
		for (;;) {
			Object e = i.next();
			sb.append(e == this ? "(this Collection)" : e);
			if (!i.hasNext())
				return sb.append(']').toString();
			sb.append(", ");
		}
	}

	/**
	 * Removes the element at the specified position in this list. Shifts any
	 * subsequent elements to the left (subtracts one from their indices).
	 *
	 * @param index the index of the element to be removed.
	 * @throws IndexOutOfBoundsException {@inheritDoc}.
	 */
	public void remove(int index) {

		restructMyList(index);
	}

	/**
	 * Restructuring collections. Move item collections.
	 * 
	 * @param index - restructuring period.
	 */
	private void restructMyList(final int index) {

		modCount++;

		if (index == size() - 1) {
			arr[index] = null;

		} else {
			int lengthCopy = size() - index - 1;
			System.arraycopy(arr, index + 1, arr, index, lengthCopy);
		}

		pointer--;

		if (pointer == (arr.length / 4)) {
			resize(pointer + (arr.length / 4));
		}
	}

	/**
	 * Change length collections.
	 * 
	 * @param len - length new object.
	 */
	private void resize(final int len) {

		Object[] temp = new Object[len];
		System.arraycopy(arr, 0, temp, 0, pointer);
		arr = temp;
	}

	private static class Node {

		private Object element;
		private Node next;
		private Node prev;

		public Node(Object element) {
			this.element = element;
			this.next = null;
		}

		public Node(Object element, Node next) {
			this.element = element;
			this.next = next;
			this.prev = prev;
		}

		public void setData(Object element) {
			this.element = element;
		}

		public Object getData() {
			return this.element;
		}

		public void setNext(Node next) {
			this.next = next;
		}

		public Node getNext() {
			return this.next;
		}

		public Node getPrev() {
			return prev;
		}

		public void setPrev(Node prev) {
			this.prev = prev;
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see ua.nure.chekhunov
	 */
	private class IteratorImpl implements Iterator<Object> {

		private int expectedModCount;
		private int currentIndex = 0;
		private int pointer = -1;
		private boolean nextOrPrevious = false;
		private boolean flag = true;

		{
			expectedModCount = QueueImpl.this.modCount;
		}

		public int getPointer() {
			return pointer;
		}

		public void setPointer(int pointer) {
			this.pointer = pointer;
		}

		public boolean isNextOrPrevious() {
			return nextOrPrevious;
		}

		public void setNextOrPrevious(boolean nextOrPrevious) {
			this.nextOrPrevious = nextOrPrevious;
		}

		public boolean isFlag() {
			return flag;
		}

		public void setFlag(boolean flag) {
			this.flag = flag;
		}

		/*
		 * (non-Javadoc)
		 * 
		 * @see ua.nure.chekhunov
		 */
		@Override
		public boolean hasNext() {

			if (pointer < toArray().length - 1) {
				return true;
			}
			return false;
		}

		/*
		 * (non-Javadoc)
		 * 
		 * @see ua.nure.chekhunov
		 */
		@Override
		public Object next() {

			flag = false;
			nextOrPrevious = false;
			return toArray()[++pointer];

		}

		/*
		 * (non-Javadoc)
		 * 
		 * @see ua.nure.chekhunov
		 */
		@Override
		public void remove() {

			if (pointer < 0) {
				throw new IllegalStateException("remove: Not does not indicate which item");
			}
			checkForComodification();
			QueueImpl.this.remove(pointer);
			if (pointer < currentIndex) {
				currentIndex--;
			}
			expectedModCount = modCount;
			pointer = -1;
		}

		/**
		 * Check modifications object state.
		 */
		final void checkForComodification() {

			if (modCount != expectedModCount) {
				// throw new ConcurrentModificationException();
			}
		}
	}

public static void main(String[] args) {
	
		Queue queue = new QueueImpl();
		//QueueImpl que = new QueueImpl();

		queue.enqueue("A");
		queue.enqueue("B");
		queue.enqueue("C");
		System.out.print(queue);
		System.out.print(queue.dequeue());
		System.out.print(queue.dequeue());
		System.out.print(queue.dequeue());
		System.out.println();
		System.out.print(queue);
		
//		queue.dequeue();
//		System.out.println(queue);

//		queue.enqueue("A");
//		queue.enqueue("B");
//		queue.enqueue("C");
//		System.out.println(queue);
//		System.out.println(queue.size());
//		System.out.println(queue.toString());
//		queue.clear();
//		System.out.println(queue + "clear");
//		queue.enqueue("A");
//		queue.enqueue("B");
//		queue.enqueue("C");
//		System.out.println(queue);
//		queue.top();
//
//		System.out.println("\nShow foreach iterator:");
//		// foreach iterator
//		for (Object o : queue) {
//			System.out.print(o + " ");
//		}
//		Iterator<Object> it = queue.iterator();
//		System.out.println("Show while iterator: ");
//		// while iterator
//		while (it.hasNext()) {
//			System.out.print(it.next() + " ");
//		}
//
//		System.out.println("\nShow remove iterator \n: " + queue);
//		Iterator<Object> it1 = queue.iterator();
//		while (it1.hasNext()) {
//			it1.next();
//			it.remove();
		}

	}


