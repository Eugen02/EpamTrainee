package ua.nure.chekhunov.practice3;

public class Part5 {

    private static final String[] ROMAN =
	    new String[]{"M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"};
    private static final int[] NUMBERS =
	    new int[]{1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};

    public static String decimal2Roman(int digit) {
	int x = digit;

	final StringBuilder s = new StringBuilder();

	for (int i = 0; i < ROMAN.length; i++) {
	    while (x >= NUMBERS[i]) {
		s.append(ROMAN[i]);
		x -= NUMBERS[i];
	    }
	}
	return s.toString();
    }

    public static void main(String[] args) {
	final int numberFor = 200;
	for (int i = 1; i <= numberFor; i++) {
	    System.out.println(i + " ==> " + decimal2Roman(i) + " ==> " + roman2Decimal(decimal2Roman(i)));
	}

    }

    public static int roman2Decimal(String digit) {
	final StringBuilder roman = new StringBuilder(digit);

	int constNum = 0;
	int number = 0;
	/* для каждой римской цифры */
	while (roman.length() != 0) {
	    /* для повторяющейся римской цифры */
	    if (roman.indexOf(ROMAN[number]) == 0) {
		constNum += NUMBERS[number];
		roman.delete(0, ROMAN[number].length());
		continue;
	    }
	    number++;
	}
	return constNum;
    }
}
//    private static final String[] NUMBERS = new String[]
//            { "I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX", "X" };
//
//    public static String decimal2Roman(int x) {
//        final StringBuilder number = new StringBuilder();
//        int j = 0;
//        if (x >= 10 && x % 10 == 0) {
//            j = 1;
//        }
//        for (int i = 0; i < x / 10 + 1 - j; i++) {
//            if ((i != x / 10 || x % 10 == 0) && x >= 10) {
//                number.append(NUMBERS[9]);
//
//            } else {
//                number.append(NUMBERS[x % 10 - 1]);
//            }
//
//        }
//        int loc = 0;
//        final int valueOfLocal = 100;
//        final int maxNumberOfCycles = 100;
//        final int numberOfCycles90 = 90;
//        final int numberOfCycles50 = 50;
//        final int numberOfCycles40 = 40;
//
//        if (x >= maxNumberOfCycles) {
//            final Pattern p = Pattern.compile("X{10,}?");
//            Matcher m = p.matcher(number);
//            while (m.find()) {
//                number.replace(m.start(), m.end(), "C");
//                m = p.matcher(number);
//                loc = x % valueOfLocal;
//            }
//        }
//        if (loc == 0) {
//            if (x >= numberOfCycles90 && x < maxNumberOfCycles) {
//                final Pattern p = Pattern.compile("(.+)(X{8})");
//                final Matcher m = p.matcher(number);
//                m.find();
//                number.replace(m.start(2), m.end(2), "C");
//            }
//            if (x >= numberOfCycles40 && x < numberOfCycles50) {
//                final Pattern p = Pattern.compile("(.+)(X{3})");
//                final Matcher m = p.matcher(number);
//                m.find();
//                number.replace(m.start(2), m.end(2), "L");
//            }
//            if (x >= numberOfCycles50 && x < numberOfCycles90) {
//                final Pattern p = Pattern.compile("(X{5})");
//                final Matcher m = p.matcher(number);
//                m.find();
//                number.replace(m.start(1), m.end(1), "L");
//            }
//        } else {
//            if (loc >= numberOfCycles90 && loc < maxNumberOfCycles) {
//                final Pattern p = Pattern.compile("(.+)(X{8})");
//                final Matcher m = p.matcher(number);
//                m.find();
//                number.replace(m.start(2), m.end(2), "C");
//            }
//            if (loc >= numberOfCycles40 && loc < numberOfCycles50) {
//                final Pattern p = Pattern.compile("(.+)(X{3})");
//                final Matcher m = p.matcher(number);
//                m.find();
//                number.replace(m.start(2), m.end(2), "L");
//            }
//            if (loc >= numberOfCycles50 && loc < numberOfCycles90) {
//                final Pattern p = Pattern.compile("(X{5})");
//                final Matcher m = p.matcher(number);
//                m.find();
//                number.replace(m.start(1), m.end(1), "L");
//            }
//        }
//        return number.toString();
//    }
//
//    public static void main(String[] args) {
//        final int numberFor = 200;
//        for (int i = 1; i <= numberFor; i++) {
//            System.out.println(i + " ==> " + decimal2Roman(i) + " ==> " + roman2Decimal(decimal2Roman(i)));
//        }
//
//    }
//
//    public static int roman2Decimal(String str) {
//
//        int value = 0;
//        final int numberOfCycles30 = 30;
//        final int numberOfCycles50 = 50;
//        final int numberOfCycles80 = 80;
//        final int numberOfCycles100 = 100;
//        for (int i = 0; i < str.length(); i++) {
//            final char s = str.charAt(i);
//            switch (s) {
//            case 'I':
//                if (i + 1 < str.length() && (str.charAt(i + 1) == 'V' || str.charAt(i + 1) == 'X')) {
//                    value -= 1;
//                    break;
//                }
//                value += 1;
//                break;
//            case 'V':
//                value += 5;
//                break;
//            case 'X':
//                value += 10;
//                break;
//            case 'L':
//                if (i > 0 && str.charAt(i - 1) == 'X') {
//                    value += numberOfCycles30;
//                    break;
//                }
//                value += numberOfCycles50;
//                break;
//            default:
//                if (i > 0 && str.charAt(i - 1) == 'X') {
//                    value += numberOfCycles80;
//                    break;
//                }
//                value += numberOfCycles100;
//            }
//        }
//        return value;
//    }
//
//}