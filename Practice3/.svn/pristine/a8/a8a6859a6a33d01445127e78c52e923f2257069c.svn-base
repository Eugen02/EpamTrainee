package ua.nure.chekhunov.practice3;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Выход: исходный текст, но регистр первого символа каждого слова, которое
 * состоит из трех и более символов, должен быть интвертирован. Словом считать
 * последовательность содержащую только буквы (все остальные символы в состав
 * слова не входят).
 */

public class Part3 {

    private static final String ENCODING = "Cp1251";

    public static String readFile(String path) {
        String res = null;
        try {
            byte[] bytes = Files.readAllBytes(Paths.get(path));
            res = new String(bytes, ENCODING);
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        return res;
    }

    public static String convert(String input) {

        StringBuilder sb = new StringBuilder(input);
        StringBuilder sb1 = new StringBuilder(input);

        Pattern p = Pattern.compile("[a-ˇ¿-ﬂ]+");
        Matcher m = p.matcher(sb);

        while (m.find()) {

            sb.replace(m.start(), m.start() + 1, m.group().substring(0, 1)

                    .toUpperCase());
        }

        String COMMA = " ";
        String REGEX = "(^(\\w|\\+|\\-|\\(|\\))+(\\W?,?\\d)*)";
        Pattern res = Pattern.compile(REGEX);
        Pattern resComma = Pattern.compile(COMMA);

        Matcher match;
        if (!resComma.matcher(sb).find()) {
            System.out.println(sb);
        } else if ((match = res.matcher(sb)).find()) {
            sb.replace(0, 4, match.group().toLowerCase());
        }

        //String firstWord = sb.toString();

        //String temp = sb.toString();
        //String parentString = temp.split(" ", 2)[1];

        return sb.toString();

    }

    public static void main(String[] args) {
        System.out.println(convert(readFile("part3.txt")));

    }

}
