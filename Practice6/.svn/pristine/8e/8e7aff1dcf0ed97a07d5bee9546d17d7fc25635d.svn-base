package ua.nure.chekhunov.practice6.part2;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;

/**
 * @author chekhunov.
 *
 */
public class Part2 {
	/**
	 * Count element.
	 */
	private static final int N = 10000;
	/**
	 * Deleted K element.
	 */
	private static final int K = 4;

	/**
	 * List length.
	 */
	private final int listLength;

	private List<Integer> circleInArray;
	private List<Integer> circleInLinked;

	/**
	 * Constructor
	 * 
	 * @param listLength - list length.
	 */
	private Part2(int listLength) {
		this.listLength = listLength;
	}

	/**
	 * Main method.
	 * 
	 * @param args argument main.
	 */
	public static void main(String[] args) {

		Part2 part2 = new Part2(10_000);

		System.out.print("ArrayList#Index:" + " ");
		System.out.println(removeByIndex(part2.getCircleInArray(), K) + " ms");
		System.out.print("LinkedList#Index:" + " ");
		System.out.println(removeByIndex(part2.getCircleInLinked(), K) + " ms");

		System.out.print("ArrayList#Iterator:" + " ");
		System.out.println(delPeople(part2.getCircleInArray(), K) + " ms");
		System.out.print("LinkedList#Iterator:" + " ");
		System.out.println(delPeople(part2.getCircleInLinked(), K) + " ms");

	}

	public static long delPeople(List list, int k) {
        
        long time = System.currentTimeMillis();
        int count = 0;
        Iterator<Integer> it = list.iterator();
        while(list.size() > 1) {
            if(it.hasNext()) {
                it.next();
                count++;
                if(count == k) {
                    it.remove();
                    count = 0;
                }
            }
            else {
                it = list.iterator();
            }
        }
        return System.currentTimeMillis() - time;
        }
	
	
	private static long removeInIterator(List list, int k) {
		long time = System.currentTimeMillis();
		int local = 0;

		while (list.size() > 1) {
			ListIterator iterator = list.listIterator(local);
			local = removeStep(iterator, k);
			local %= list.size();
		}

		return System.currentTimeMillis() - time;
	}

	private static int removeStep(Iterator iterator, int k) {
		int i = 0;
		while (iterator.hasNext()) {
			i = (i + 1) % k;
			iterator.next();
			if (i == k - 1) {
				iterator.remove();
			}
		}
		return i;
	}

	/**
	 * Delete item for input list.
	 * 
	 * @param list - input list.
	 * @param k    - delete k element.
	 */
	public static long removeByIndex(List<Integer> list, int k) {

		if (0 > k || k > list.size()) {
			throw new IllegalArgumentException(k + " does not match: 0 < k < n");
		}
		int count = 0;
		long milis = System.currentTimeMillis();
		for (int i = 0; list.size() > 1; count++, i++, i = i % list.size()) {
			if (count == k - 1) {
				list.remove(i);
				count = 0;
			}
		}
		milis = (System.currentTimeMillis() - milis);
		return milis;
	}

	/**
	 * Delete item for input list.
	 * 
	 * @param list - input list.
	 * @param k    - delete k element.
	 */
	public static long removeByIterator(List<Integer> list, int k) {

		if (0 > k || k > list.size()) {
			throw new IllegalArgumentException(k + " does not match: 0 < k < n");
		}

		int count = 0;
		long milis = System.currentTimeMillis();
		deleteElementIterator(list, k, count);
		milis = (System.currentTimeMillis() - milis);
		return milis;
	}

	private static void deleteElementIterator(List<Integer> list, int k, int count) {
		for (int i = 0; list.size() > 1; count++, i++, i = i % list.size()) {
			if (count == k - 1) {
				deleteIndexInList(list, i);
				count = 0;
			}
		}
	}

	/**
	 * Delete item with Iterator.
	 * 
	 * @param list - input list.
	 * @param k    - delete k element.
	 * @return
	 */
	private static int deleteIndexInList(List<Integer> list, int k) {
		int index = 0;
		for (Iterator<Integer> i = list.iterator(); i.hasNext(); index++) {
			Integer name = i.next();
			if (index == k) {
				i.remove();
			}
		}
		return index;
	}

	public List<Integer> getCircleInArray() {
		circleInArray = new ArrayList<>();
		for (int i = 0; i < listLength; i++) {
			circleInArray.add(i);
		}
		return circleInArray;
	}

	public void setCircleInArray(List<Integer> circleInArray) {
		this.circleInArray = circleInArray;
	}

	public List<Integer> getCircleInLinked() {
		circleInLinked = new LinkedList<>();
		for (int i = 0; i < listLength; i++) {
			circleInLinked.add(i);
		}
		return circleInLinked;
	}

	public void setCircleInLinked(List<Integer> circleInLinked) {
		this.circleInLinked = circleInLinked;
	}

}
