package ua.nure.chekhunov.practice6.part6;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Comparator;


public class Part62 extends Command {

	private static final String ENCODING = "Cp1251";

	private static final int COUNT = 3;

	private static final Printer PRINTER = new PrinterConsole();
	
	public Part62(final String inputStr, final int count, final Printer printer) {
		super(printer, inputStr, count);
	}
	
	@Override
	public void execute() {
		getWordContainer().add(getInputStr());
		getWordContainer().sort(new Comparator<Word>() {
			@Override
			public int compare(final Word o1, final Word o2) {
				return o2.getWord().length() - o1.getWord().length();
			}
		});
		StringBuilder resStr = new StringBuilder();
		final int length = Math.min(getCount(), getWordContainer().size());
		Word word;
		for (int i = 0; i < length; i++) {
			word = getWordContainer().get(i);
			resStr.append(
					word.getWord() + " ==> " + word.getWord().length() + System.lineSeparator());
		}
		getPrinter().show("length" + System.lineSeparator() + resStr.toString());
	}

	public static void main(String[] args) {	
		if (args.length != 0 && ParseInputCommand.checkCommand(args[0])) {
			FileCommandBean bean = ParseInputCommand.parse(args[0]);
			try {
				File file = new File(bean.getFileName());
				String resRead = FileRead.read(file, ENCODING);

				switch (bean.getTask()) {
				case DUPLICATES:
					new Part63(resRead, COUNT, PRINTER).execute();
					break;
				case FREQUENCY:
					new Part61(resRead, COUNT, PRINTER).execute();
					break;
				case LENGTH:
					new Part62(resRead, COUNT, PRINTER).execute();
					break;
				default:
					break;
				}
			} catch (FileNotFoundException e) {
				System.err.println("read file is not found: " + e.getMessage());
			}
		} else {
			PRINTER.show("error input command");
		}
	}
		
	}
