package ua.nure.chekhunov.practice5;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Arrays;
import java.util.Scanner;

public class Part4 {

	/**
	 * Flag for test.
	 */
	private static boolean flag;
	
	/**
	 * Path to the file.
	 */
	private static final String FILE_NAME = "part4.txt";
	
	/**
	 * Encoding file.
	 */
	private static final String ENCODING = "UTF-8";
	
	private static final int SIZE = 4;
	private static int[][] arr = new int[SIZE][100];
	private static long counter = 0;

	public static void fillTheArrayWithNumbers() throws IOException {
		
		
		
		for (int i = 0; i < SIZE; i++) {
			for (int j = 0; j < arr[i].length; j++) {
				arr[i][j] = run(FILE_NAME, ENCODING);
			}
		}
	}

	public static int maximumValue(int[] arr) {
		int max = arr[0];
		for (int i = 1; i < arr.length; i++) {
			try {
				Thread.sleep(1);
			} catch (InterruptedException e) {
				System.err.println("Thread:" + Thread.currentThread().getName()
						+ " is interrupted in method maximumValue()");
			}
			if (arr[i] > max) {
				max = arr[i];
			}

		}
		return max;
	}

	public static void singleThread() {
		long time = System.currentTimeMillis();
		int max = 0;
		for (int i = 0; i < SIZE; i++) {
			for (int j = 0; j < arr[i].length; j++) {
				try {
					Thread.sleep(1);
				} catch (InterruptedException e) {
					System.err.println("Thread:"
							+ Thread.currentThread().getName()
							+ " is interrupted in method maximumValue()");
				}
				if (arr[i][j] > max) {
					max = arr[i][j];
				}
			}
		}
		System.out.println("MAX " + max);
		System.out.println("TIME " + (System.currentTimeMillis() - time));

	}

	public static int[] multiplyThreads() {
		final int[] temp = new int[SIZE];
		for (int i = 0; i < SIZE; i++) {

			final int count = i;
			Thread myThread = new Thread() {
				public void run() {
					long time = System.currentTimeMillis();

					temp[count] = maximumValue(arr[count]);
					time = System.currentTimeMillis() - time;
					if (counter < time) {
						counter = time;
					}
				};
			};
			myThread.start();
		}
		return temp;
	}


	/**
	 * Constructor with parameter.
	 *
	 * @param path     - path to the file.
	 * @param encoding - file encoding.
	 * @return content file.
	 * @throws
	 */
	public static int readFile(final String path, final String encoding) throws IOException {
		final StringBuilder builder = new StringBuilder();
		try (Scanner scan = new Scanner(new FileInputStream(new File(path)), encoding)) {
			while (scan.hasNextLine()) {
				builder.append(scan.nextLine()).append(System.lineSeparator());
			}
			if (flag) {
				throw new IllegalArgumentException();
			}
		}
		
		//String strings = builder.toString().trim();
		//int[] array = Arrays.asList(strings).stream().mapToInt(Integer::parseInt).toArray();
		//int x = Integer.parseInt(strings);
		return builder.capacity();
	}

	/**
	 * Method launch.
	 *
	 * @param path     - path to the file.
	 * @param encoding - file encoding.
	 * @return result translation text.
	 * @throws FileNotFoundException - not fount file.
	 */
	public static int run(final String path, final String encoding) throws IOException {
		final int res = readFile(path, encoding);
		return res;
	}
	
	public static void main(String[] args) throws IOException {
		
		fillTheArrayWithNumbers();		
		singleThread();		
		int[] temp = multiplyThreads();
		try {
			Thread.sleep(300);
		} catch (InterruptedException e) {
			System.err.println("Thread:" + Thread.currentThread().getName()
					+ " is interrupted in method main()");
		}
		Arrays.sort(temp);
		System.out.println("MAX2 " + temp[SIZE - 1]);
		System.out.println("TIME " + counter);
	}

}