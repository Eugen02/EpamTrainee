package ua.nure.chekhunov.practice5;

//import static java.lang.Thread.sleep;

import java.util.concurrent.TimeUnit;

/**
 *
 * @author chekhunov
 *
 */
public class Part3 {

	private int counter;
	private int counter2;

	private int childThreads;
	private static int loopPeps;
	private int sleep;

	public Part3(int n, int k, int t) {
		this.childThreads = n;
		this.loopPeps = k;
		this.sleep = t;
	}

	/**
	 * Print console.
	 * 
	 * @throws InterruptedException - multithreaded exception.
	 */
	private void printConsole() throws InterruptedException {
		System.out.printf("%s%n",Thread.currentThread().getName());
		if (counter == counter2) {
			System.out.printf("%s %s%n", counter, counter2);
		} else {
			System.out.printf("%s != %s%n", counter, counter2);
		}
		counter++;
//		try {
//            sleep(sleep);
//        } catch (InterruptedException e) {
//            e.printStackTrace();
//        }
		TimeUnit.MILLISECONDS.sleep(sleep);
		counter2++;
		isEmpty();
		}
	
	/**
	 * no synchronized method.
	 * 
	 * @throws InterruptedException
	 */
	public void test() throws InterruptedException {

		Part3 obj = new Part3(childThreads, loopPeps, sleep);
		Method method = obj.new ComparisonNoSynchronized();
		ThreadImp t1 = new ThreadImp(method);
		ThreadImp t2 = new ThreadImp(method);
		t1.join();
		t2.join();

	}

	public boolean isEmpty() {
		return ((counter != 0) && (counter2 != 0));

//		return true;
//		return false;

	}

	/**
	 * reset all counters.
	 */
	public void reset() {
		counter = 0;
		counter2 = 0;
		System.out.println("counters reset");
	}

	/**
	 * Synchronized method.
	 * 
	 * @throws InterruptedException
	 */
	public void testSync() throws InterruptedException {

		Part3 p = new Part3(childThreads, loopPeps, sleep);
		Method method2 = p.new ComparisonSynchronized();
		ThreadImp t1Synch = new ThreadImp(method2);
		ThreadImp t2Synch = new ThreadImp(method2);
		t1Synch.join();
		t2Synch.join();
	}

	/**
	 * @param args
	 * @throws InterruptedException
	 */
	public static void main(String[] args) throws InterruptedException {
		Part3 p = new Part3(2, 10, 100);
		p.test();
		p.reset();
		p.testSync();
	}

	private static class ThreadImp extends Thread {
		/**
		 * {@link Method}.
		 */
		private final Method method;

		/**
		 * Constructor with parameters.
		 * 
		 * @param method - {@link Method}.
		 */
		ThreadImp(final Method method) {
			this.method = method;
			start();
		}

		@Override
		public void run() {
			int i = 1;
			try {
				while (i != loopPeps) {
					method.comparison();
					++i;
				}
			} catch (InterruptedException e) {
				System.out.println(e.getMessage());
			}
		}
	}

	private interface Method {

		/**
		 * Comparison method.
		 * 
		 * @throws InterruptedException - multithreaded exception.
		 */
		void comparison() throws InterruptedException;
	}

	/**
	 * Implementation ComparisonNoSynchronized. <br>
	 * ComparisonNoSynchronized implements {@link Method}.
	 * 
	 * @author chekhunov.
	 * 
	 */
	private class ComparisonNoSynchronized implements Method {

		@Override
		public void comparison() throws InterruptedException {
			printConsole();
		}
	}

	/**
	 * Implementation ComparisonSynchronized. <br>
	 * ComparisonSynchronized implements {@link Method}.
	 * 
	 * @author chekhunov.
	 */
	private class ComparisonSynchronized implements Method {

		@Override
		public synchronized void comparison() throws InterruptedException {
			printConsole();
		}
	}
}