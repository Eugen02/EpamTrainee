package ua.nure.chekhunov.practice4;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Implementation "Part1".<br>
 * Displays the contents of a text file to the console , replacing each word of
 * length three characters are all lower case characters (lower case) in capital
 * (upper case).
 *
 * @author chekhunov.
 */
/**
 * @author macbookpro
 *
 */
public final class Part1 {

    /**
     * Path to the file.
     */
    private static final String FILE_NAME = "part1.txt";
    /**
     * Encoding file.
     */
    private static final String ENCODING = "Cp1251";
    /**
     * Regular expression for word.
     */
    private static final String REGEX = "\\s*([\\p{L}\\p{Nd}]*)\\s*(\\p{P}*)(\\n*)";

    /**
     * lineSeparator.
     */
    private static final String LS = System.lineSeparator();

    /**
     * Regular expression.
     */
    private static final Pattern PATTERN;
    /**
     * Max length word.
     */
    private static final int WORD_MAX_LENGTH = 3;
    /**
     * Flag for test.
     */
    private static boolean flag = false;

    static {
        PATTERN = Pattern.compile(REGEX);
    }

    public static String convert(String input) {
        String pre;
        String post;
        StringBuffer word;
        final StringBuffer out = new StringBuffer();
        final String letter = "a-zA-Z\\p{InCyrillic}";
        final String regex = "(^|[^" + letter
                + "]*)([" + letter + "]+)([^" + letter + "]*|$)";

        final Matcher m = Pattern.compile(regex).matcher(input);
        while (m.find()) {
            pre = m.group(1);
            word = new StringBuffer(m.group(2));
            post = m.group(3);
            if (word.length() > WORD_MAX_LENGTH) {
                word = invertCase(word);
            }
            m.appendReplacement(out, pre + word.toString() + post);
        }
        m.appendTail(out);

        String outString = out.toString();
        if (outString.endsWith(LS)) {
            outString = outString.trim();
        }

        return outString;
    }

    private static StringBuffer invertCase(StringBuffer text) {

        //        final StringBuilder textSB = new StringBuilder(text);
        //        for(int i = 0; i < text.length(); i++) {
        //            if(text.charAt(i) > 64 && text.charAt(i) < 91) {
        //                textSB.setCharAt(i, (char)(text.charAt(i) + 32));
        //            } else if(text.charAt(i) > 96 && text.charAt(i) < 123) {
        //                textSB.setCharAt(i, (char)(text.charAt(i) - 32));
        //            }
        //        }
        //        final StringBuffer temp = new StringBuffer(textSB);
        //
        //        return temp;
        //    }
        final StringBuffer sb = new StringBuffer();
        final String temp = text.toString();
        final char[] chars = temp.toCharArray();
        for (int i = 0; i < chars.length; i++) {
            final char c = chars[i];
            if (Character.isUpperCase(c)) {
                sb.append(chars[i] = Character.toLowerCase(c));
            } else if (Character.isLowerCase(c)) {
                sb.append(chars[i] = Character.toUpperCase(c));
            }
        }

        return sb;
    }

    /**
     * Main functions.
     *
     * @param args argument main functions.
     * @throws IOException {@link IOException}.
     */
    public static void main(final String[] args) throws IOException {

        System.out.println(Part1.run(FILE_NAME, ENCODING));
    }
    /**
     * Constructor with parameter.
     *
     * @param path     - path to the file.
     * @param encoding - file encoding.
     * @return content file.
     * @throws FileNotFoundException - not fount file.
     */
    public static String readFile(final String path, final String encoding) throws FileNotFoundException {
        final StringBuilder builder = new StringBuilder();
        Scanner scan = null;
        try {
            scan = new Scanner(new FileInputStream(new File(path)), encoding);
            while (scan.hasNextLine()) {
                builder.append(scan.nextLine()).append(System.lineSeparator());
            }
            if (flag) {
                throw new Error();
            }
        } finally {
            if (scan != null) {
                scan.close();
            }
        }
        return builder.toString().trim();
    }

    /**
     * Method launch.
     *
     * @param path     - path to the file.
     * @param encoding - file encoding.
     * @return result translation text.
     * @throws FileNotFoundException - not fount file.
     */
    public static String run(final String path, final String encoding) throws FileNotFoundException {
        final String res = readFile(path, encoding);
        return convert(res);
    }

    /**
     * Default constructor.
     */
    private Part1() {
    }
}