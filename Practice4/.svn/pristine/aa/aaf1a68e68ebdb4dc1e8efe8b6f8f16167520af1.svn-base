package ua.nure.chekhunov.practice4;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;
import java.util.Scanner;

/**
 *
 * Implementation Util class: 1 - writing to file random numbers(0-50); 2 -
 * reading data from a file , sort, and write to the file.
 *
 * @author chekhunov.
 *
 */
public final class Part2 {

    /**
     * Minimal random value.
     */
    private static final int MIN_RAND = 0;
    /**
     * Output text.
     */
    private static final String MESSAGE_INPUT = "input ==>";
    /**
     * Output text.
     */
    private static final String MESSAGE_OUTPUT = "output ==>";
    /**
     * Flag for test.
     */
    private static boolean flag = false;

    /**
     * Created new file.
     *
     * @param nameFile
     *            - name file.
     * @return true if success created file.
     * @throws IOException
     *             - if file exceptions.
     */
    public static boolean createNewFile(final String nameFile) throws IOException {
        final File file = new File(nameFile);
        if (!file.exists()) {
            return file.createNewFile();
        }
        return false;
    }

    /**
     * Random initial array.
     *
     * @param maxRand
     *            - random max value.
     * @param n
     *            - count numbers.
     * @return array filled random values.
     */
    private static Integer[] intitRand(final int maxRand, final int n) {
        final Random rand = new Random();
        final Integer[] arr = new Integer[n];
        for (int i = 0; i < arr.length; i++) {
            arr[i] = rand.nextInt(maxRand - MIN_RAND) + MIN_RAND;
        }
        return arr;
    }

    /**
     * Read file.
     *
     * @param path
     *            - path to the file.
     * @param encoding
     *            - encoding file.
     * @return - read value from file.
     * @throws FileNotFoundException
     *             - file not found.
     */
    private static List<Integer> readFile(final String path, final String encoding)
            throws FileNotFoundException {
        final List<Integer> list = new ArrayList<>();
        Scanner scan = null;
        try {
            scan = new Scanner(new File(path), encoding);
            while (scan.hasNextInt()) {
                list.add(scan.nextInt());
            }
            if (flag) {
                throw new Error("Part2#readFile(String, String)");
            }
        } finally {
            if (scan != null) {
                scan.close();
            }
        }
        return list;
    }

    /**
     * Run execution.
     *
     * @param filePath
     *            path to the file.
     * @param sortFilePath
     *            - path to the sorted file.
     * @param encoding
     *            - encoding file.
     * @param n
     *            - count numbers.
     * @param maxRand
     *            - max random value.
     * @return class work results.
     * @throws IOException
     *             exception I/O.
     */
    public static String run(final String filePath, final String sortFilePath,
            final String encoding, final int n, final int maxRand) throws IOException {
        final StringBuilder outputStr = new StringBuilder();
        final Integer[] arr = intitRand(maxRand, n);
        writeFileArr(filePath, encoding, arr);

        List<Integer> list;
        outputStr.append(MESSAGE_INPUT + " "
                + Arrays.toString(arr).replaceAll(",", " ").replaceAll("[\\[|\\]]", "")
                + System.lineSeparator());
        list = readFile(filePath, encoding);
        sort(list);
        writeFileArr(sortFilePath, encoding, list.toArray());

        outputStr.append(MESSAGE_OUTPUT + " "
                + list.toString().replaceAll(",", " ").replaceAll("[\\[|\\]]", ""));
        return outputStr.toString().trim();
    }

    /**
     * Sort list.
     *
     * @param <T>
     *            - type extends Comparable.
     * @param list
     *            - input list.
     */
    public static <T extends Comparable<T>> void sort(List<T> list) {
        for (int i = 0; i < list.size() - 1; i++) {
            boolean swapped = false;
            for (int j = 0; j < list.size() - i - 1; j++) {
                if (list.get(j).compareTo(list.get(j + 1)) > 0) {
                    final T tmp = list.get(j);
                    list.set(j, list.get(j + 1));
                    list.set((j + 1), tmp);
                    swapped = true;
                }
            }
            if (!swapped) {
                break;
            }
        }
    }

    /**
     * Write data to the file.
     *
     * @param <T>
     *            - type array.
     * @param path
     *            - path to the file.
     * @param encoding
     *            - file encoding.
     * @param arr
     *            - input array.
     * @throws IOException
     *             exception I/O.
     */
    private static <T> void writeFileArr(final String path, final String encoding, final T[] arr)
            throws IOException {
        createNewFile(path);

        PrintWriter writer = null;
        try {
            writer = new PrintWriter(new OutputStreamWriter(new FileOutputStream(path), encoding));
            writer.print(Arrays.toString(arr).replaceAll(",", " ").replaceAll("[\\[|\\]]", ""));
            if (flag) {
                throw new Error("Part2#writeFileArr(String, String, Array)");
            }
        } finally {
            if (writer != null) {
                writer.close();
            }
        }
    }

    /**
     * Default constructor.
     */
    private Part2() {
    }
}