package ua.nure.chekhunov.practice4;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Part6.
 *
 * @author chekhunov.
 */
public final class Part6 {
	
	private static boolean flag = false;
	private static final String LS = System.lineSeparator();
	public static final String ENCODING = "Cp1251";

	private static String fileName = "part6.txt";

	public static String getFileName() {
		return fileName;
	}

	public final void setFileName(String fileName) {
		this.fileName = fileName;
	}

	public void run() throws FileNotFoundException {
		final String res = readFile(fileName, ENCODING);
		input(res);
	}

	public static String readFile(final String path, final String encoding) throws FileNotFoundException {
		final StringBuilder builder = new StringBuilder();
		Scanner scan = null;
		try {
			scan = new Scanner(new FileInputStream(new File(path)), encoding);
			while (scan.hasNextLine()) {
				builder.append(scan.nextLine()).append(System.lineSeparator());
			}
			if (flag) {
				throw new Error();
			}
		} finally {
			if (scan != null) {
				scan.close();
			}
		}
		return builder.toString();
	}

	public void input(String res) {

		String regex;
		final String letter = "a-zA-Z";
		final String startStr = "(^|\\s)([" + letter + "]";
		final String endStr = ")(?=\\s|" + LS + "|$)";
		
		final String letterCyr = "\\p{InCyrillic}";
		final String startStrCyr = "(^|\\s)([" + letterCyr + "]";
		final String endStrCyr = ")(?=\\s|" + LS + "|$)";
		
		
		Scanner sc = new Scanner(System.in, ENCODING);
		while (sc.hasNext()) {
			String str = sc.nextLine();
			switch (str) {
			case "Latn":
				regex = startStr + "{1}" + endStr;
				System.out.println(getResTypeParse(regex, res));
				break;

			case "latn":
				regex = startStr + "{1}" + endStr;
				System.out.println(getResTypeParse(regex, res));
				break;
				
			case "Cyrl":
				regex = startStrCyr + "{2,}" + endStrCyr;
				System.out.println(getResTypeParse(regex, res));
				break;

			case "cyrl":
				regex = startStrCyr + "{2,}" + endStrCyr;
				System.out.println(getResTypeParse(regex, res));
				break;

			case "stop":
				return;

			default:
				System.out.println("Incorrect input");
			}
		}
	}

	public String getResTypeParse(final String regex, String input) {
		String word;
		StringBuilder out = new StringBuilder();
		Matcher m = Pattern.compile(regex).matcher(input);
		boolean found = false;
		while (m.find()) {
			word = m.group(2);
			if (!found) {
				out.append(word);
				found = true;
			} else {
				out.append(" ".concat(word));
			}
		}
		if (!found) {
			out.append("No such values");
		}
		out.append(LS);

		return out.toString();
	}

	public static void main(String[] args) throws IOException {
		Part6 part6 = new Part6();
		part6.run();

	}

}
	


//    /**
//     * Path to the file.
//     */
//    private static final String FILE_NAME = "part6.txt";
//
//    /**
//     * Regex for parse input str.
//     */
//    private static final String REGEX = "([\\p{L}0-9]+)";
//
//    /**
//     * {@link Pattern}.
//     */
//    private static final Pattern PATTERN;
//    /**
//     * Message output.
//     */
//    private static final String MESSAGE_ENTER;
//    /**
//     * Length input parameters.
//     */
//    private static final int LENTH_INPUT_PARAM = 2;
//
//    /**
//     * Stop key.
//     */
//    private static final String STOP = "q";
//
//    /**
//     * Encoding.
//     */
//    private static final String ENCODING = "Cp1251";
//    static {
//        MESSAGE_ENTER = "Enter key and localizations(" + STOP + " - quit): ";
//        PATTERN = Pattern.compile(REGEX);
//    }
//
//    /**
//     * Main method.
//     *
//     * @param args
//     *            - arg main method.
//     * @throws IOException
//     *             - exception I/O.
//     */
//    public static void main(final String[] args) throws IOException {
//        final Parser parser = new Parser(new File(FILE_NAME));
//        for (final String str : parser) {
//            System.out.println(str);
//        }
//    }
//
//    /**
//     * Parse input parameter.
//     *
//     * @param input
//     *            - input string.
//     * @return parse result.
//     */
//    protected static String[] parseInputStr(final String input) {
//        if (input.isEmpty()) {
//            return null;
//        }
//        final Matcher m = PATTERN.matcher(input);
//        final List<String> list = new ArrayList<>();
//        while (m.find()) {
//            list.add(m.group());
//        }
//        return list.toArray(new String[LENTH_INPUT_PARAM]);
//    }
//
//    /**
//     * Show text on console.
//     *
//     * @param input
//     *            - input string
//     */
//    protected static void printConsole(final String input) {
//        System.out.println(input);
//    }
//
//    /**
//     * Run execute.
//     *
//     * @param baseName
//     *            - base Name resource file.
//     */
//    @SuppressWarnings("resource")
//    public static void run(final String baseName) {
//        String[] resParse;
//        final Scanner scan = new Scanner(System.in, ENCODING);
//        final StringBuilder str = new StringBuilder();
//        ResourceProperty resourceProperty;
//        final StringBuilder resBundle = new StringBuilder();
//        while (true) {
//            str.setLength(0);
//            System.out.print(MESSAGE_ENTER);
//            str.append(scan.nextLine());
//            resParse = parseInputStr(str.toString().trim());
//            if (resParse == null || resParse.length > LENTH_INPUT_PARAM) {
//                printConsole("Incorrect input");
//                continue;
//            } else if (STOP.equals(resParse[0])) {
//                printConsole("Stop");
//                break;
//            }
//            resourceProperty = new ResourceProperty(baseName, new Locale(resParse[1]));
//            resBundle.append(resourceProperty.getValue(resParse[0]));
//            if (!"null".equals(resBundle.toString())) {
//                printConsole(str + ": " + resBundle);
//            } else {
//                printConsole("No such value");
//            }
//            resBundle.setLength(0);
//        }
//    }
//
//    /**
//     * Default constructor.
//     */
//    protected Part6() {
//        throw new UnsupportedOperationException("Exeption implement Part5");
//    }
//}
